Compare the performance of Strassen method of matrix multiplication with traditional way of matrix multiplication.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to allocate memory for a 2D array (matrix)
int** allocateMatrix(int size) {
    int** matrix = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++) {
        matrix[i] = (int*)malloc(size * sizeof(int));
    }
    return matrix;
}

// Function to free the allocated memory of a matrix
void freeMatrix(int** matrix, int size) {
    for (int i = 0; i < size; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

// Traditional matrix multiplication
void traditionalMultiply(int** A, int** B, int** C, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = 0;
            for (int k = 0; k < n; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// Strassen's matrix multiplication
void add(int** A, int** B, int** C, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}

void subtract(int** A, int** B, int** C, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

// Strassen function to multiply two matrices
void strassenMultiply(int** A, int** B, int** C, int n) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }
    
    int newSize = n / 2;
    int** A11 = allocateMatrix(newSize);
    int** A12 = allocateMatrix(newSize);
    int** A21 = allocateMatrix(newSize);
    int** A22 = allocateMatrix(newSize);
    int** B11 = allocateMatrix(newSize);
    int** B12 = allocateMatrix(newSize);
    int** B21 = allocateMatrix(newSize);
    int** B22 = allocateMatrix(newSize);
    int** M1 = allocateMatrix(newSize);
    int** M2 = allocateMatrix(newSize);
    int** M3 = allocateMatrix(newSize);
    int** M4 = allocateMatrix(newSize);
    int** M5 = allocateMatrix(newSize);
    int** M6 = allocateMatrix(newSize);
    int** M7 = allocateMatrix(newSize);
    int** tempA = allocateMatrix(newSize);
    int** tempB = allocateMatrix(newSize);
    
    // Divide matrices A and B into sub-matrices
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];
            
            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }

    // M1 = (A11 + A22) * (B11 + B22)
    add(A11, A22, tempA, newSize);
    add(B11, B22, tempB, newSize);
    strassenMultiply(tempA, tempB, M1, newSize);

    // M2 = (A21 + A22) * B11
    add(A21, A22, tempA, newSize);
    strassenMultiply(tempA, B11, M2, newSize);

    // M3 = A11 * (B12 - B22)
    subtract(B12, B22, tempB, newSize);
    strassenMultiply(A11, tempB, M3, newSize);

    // M4 = A22 * (B21 - B11)
    subtract(B21, B11, tempB, newSize);
    strassenMultiply(A22, tempB, M4, newSize);

    // M5 = (A11 + A12) * B22
    add(A11, A12, tempA, newSize);
    strassenMultiply(tempA, B22, M5, newSize);

    // M6 = (A21 - A11) * (B11 + B12)
    subtract(A21, A11, tempA, newSize);
    add(B11, B12, tempB, newSize);
    strassenMultiply(tempA, tempB, M6, newSize);

    // M7 = (A12 - A22) * (B21 + B22)
    subtract(A12, A22, tempA, newSize);
    add(B21, B22, tempB, newSize);
    strassenMultiply(tempA, tempB, M7, newSize);

    // Combining M1 to M7 to get submatrices of result matrix C
    int** C11 = allocateMatrix(newSize);
    int** C12 = allocateMatrix(newSize);
    int** C21 = allocateMatrix(newSize);
    int** C22 = allocateMatrix(newSize);

    add(M1, M4, tempA, newSize);
    subtract(tempA, M5, tempB, newSize);
    add(tempB, M7, C11, newSize);

    add(M3, M5, C12, newSize);

    add(M2, M4, C21, newSize);

    add(M1, M3, tempA, newSize);
    subtract(tempA, M2, tempB, newSize);
    add(tempB, M6, C22, newSize);

    // Construct the final result matrix C
    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
            C[i + newSize][j] = C21[i][j];
            C[i + newSize][j + newSize] = C22[i][j];
        }
    }

    // Free allocated sub-matrices
    freeMatrix(A11, newSize);
    freeMatrix(A12, newSize);
    freeMatrix(A21, newSize);
    freeMatrix(A22, newSize);
    freeMatrix(B11, newSize);
    freeMatrix(B12, newSize);
    freeMatrix(B21, newSize);
    freeMatrix(B22, newSize);
    freeMatrix(M1, newSize);
    freeMatrix(M2, newSize);
    freeMatrix(M3, newSize);
    freeMatrix(M4, newSize);
    freeMatrix(M5, newSize);
    freeMatrix(M6, newSize);
    freeMatrix(M7, newSize);
    freeMatrix(tempA, newSize);
    freeMatrix(tempB, newSize);
    freeMatrix(C11, newSize);
    freeMatrix(C12, newSize);
    freeMatrix(C21, newSize);
    freeMatrix(C22, newSize);
}

int main() {
    int n = 4; // Matrix size (must be a power of 2 for Strassen's algorithm)
    int** A = allocateMatrix(n);
    int** B = allocateMatrix(n);
    int** C = allocateMatrix(n);
    int** D = allocateMatrix(n);

    // Fill matrices A and B with random values
    srand(time(0));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            A[i][j] = rand() % 10;
            B[i][j] = rand() % 10;
        }
    }

    // Measure time for traditional matrix multiplication
    clock_t start = clock();
    traditionalMultiply(A, B, C, n);
    double traditionalTime = (double)(clock() - start) / CLOCKS_PER_SEC;

    // Measure time for Strassen's matrix multiplication
    start = clock();
    strassenMultiply(A, B, D, n);
    double strassenTime = (double)(clock() - start) / CLOCKS_PER_SEC;

    // Print the results
    printf("Traditional Multiplication Time: %f seconds\n", traditionalTime);
    printf("Strassen Multiplication Time: %f seconds\n", strassenTime);

    // Free allocated memory
    freeMatrix(A, n);
    freeMatrix(B, n);
    freeMatrix(C, n);
    freeMatrix(D, n);

    return 0;
}
