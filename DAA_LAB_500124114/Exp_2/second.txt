Implement divide and conquer based merge sort and quick sort algorithms and compare their performance for the same set of elements. 

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Merge Sort helper function to merge two halves of an array
void merge(int arr[], int left, int mid, int right) {
    // Calculate the sizes of the two subarrays to merge
    int n1 = mid - left + 1;
    int n2 = right - mid;
    
    // Temporary arrays to hold the two halves
    int L[n1], R[n2];
    
    // Copy data into temporary arrays L[] and R[]
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];
    
    // Merge the temporary arrays back into arr[left..right]
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {  // Select the smaller element
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy remaining elements of L[], if any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy remaining elements of R[], if any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Merge Sort function using divide and conquer approach
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        // Find the midpoint
        int mid = left + (right - left) / 2;

        // Recursively sort the first and second halves
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        // Merge the sorted halves
        merge(arr, left, mid, right);
    }
}

// Quick Sort helper function to partition the array
int partition(int arr[], int low, int high) {
    // Choose the last element as pivot
    int pivot = arr[high];
    int i = low - 1;  // Index of smaller element

    for (int j = low; j < high; j++) {
        // If current element is smaller than or equal to pivot
        if (arr[j] <= pivot) {
            i++;
            // Swap arr[i] and arr[j]
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    // Swap arr[i + 1] and arr[high] (or pivot)
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return i + 1;  // Return the partition index
}

// Quick Sort function using divide and conquer approach
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // Partition the array and get the partition index
        int pi = partition(arr, low, high);

        // Recursively sort elements before and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    // Number of elements to sort
    const int SIZE = 1000;
    int arr1[SIZE], arr2[SIZE];

    // Generate random elements for testing, copying to arr1 and arr2
    srand(time(NULL));  // Seed for random number generator
    for (int i = 0; i < SIZE; i++) {
        int num = rand() % 100000;
        arr1[i] = num;
        arr2[i] = num;
    }

    // Measure time for Merge Sort
    clock_t start = clock();
    mergeSort(arr1, 0, SIZE - 1);
    double mergeSortTime = (double)(clock() - start) / CLOCKS_PER_SEC;

    // Measure time for Quick Sort
    start = clock();
    quickSort(arr2, 0, SIZE - 1);
    double quickSortTime = (double)(clock() - start) / CLOCKS_PER_SEC;

    // Print the performance comparison results
    printf("Merge Sort Time: %f seconds\n", mergeSortTime);
    printf("Quick Sort Time: %f seconds\n", quickSortTime);

    return 0;
}
